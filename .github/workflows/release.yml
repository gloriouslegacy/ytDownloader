name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - "v*"

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # 태그에서 버전 추출
      - name: Determine version
        id: vars
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            base_version="${GITHUB_REF#refs/tags/v}"
            version="$base_version"
            release_name="$base_version"
          else
            version="0.0.0-dev-$(date +%Y%m%d)"
            base_version="0.0.0-dev"
            release_name="$version"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "base_version=$base_version" >> $GITHUB_OUTPUT
          echo "release_name=$release_name" >> $GITHUB_OUTPUT

      # WPF 앱 빌드 (버전 주입)
      - name: Build (ytDownloader WPF)
        run: dotnet publish ytDownloader/ytDownloader.csproj -c Release -r win-x64 --self-contained false -o publish/ytDownloader -p:Version=${{ steps.vars.outputs.version }}

      # Updater 빌드
      - name: Build (Updater)
        shell: pwsh
        run: |
          dotnet build Updater/Updater.csproj -c Release -p:Version=${{ steps.vars.outputs.version }}
          New-Item -ItemType Directory -Path publish/Updater -Force
          Copy-Item "Updater/bin/Release/net8.0-windows/*" -Destination "publish/Updater/" -Recurse

      # 빌드 결과 확인 (디버깅용)
      - name: List build output
        shell: pwsh
        run: |
          Write-Host "=== ytDownloader 빌드 결과 ==="
          Get-ChildItem publish/ytDownloader -Recurse | Format-Table Name, Length, FullName
          
          Write-Host "`n=== Updater 빌드 결과 ==="
          Get-ChildItem publish/Updater -Recurse | Format-Table Name, Length, FullName

      # 릴리스 패키지 준비
      - name: Prepare dist
        shell: pwsh
        run: |
          mkdir dist
          mkdir dist/ytDownloader
          Copy-Item publish/ytDownloader/* dist/ytDownloader/ -Recurse
          
          # Updater 파일들을 updater 서브폴더에 복사
          mkdir dist/ytDownloader/updater
          Copy-Item publish/Updater/* dist/ytDownloader/updater/ -Recurse
          
          # 불필요한 파일 제거
          if (Test-Path dist/ytDownloader/tools) { Remove-Item dist/ytDownloader/tools -Recurse -Force }
          Get-ChildItem dist/ytDownloader -Include *.pdb -Recurse | Remove-Item -Force
          
          # ✅ zip 이름 항상 고정
          Compress-Archive -Path dist/ytDownloader/* -DestinationPath yt_downloader.zip -Force

          mkdir dist/Updater
          Copy-Item publish/Updater/* dist/Updater/ -Recurse
          Compress-Archive -Path dist/Updater/* -DestinationPath yt_updater.zip -Force

      # GitHub Release 생성
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.vars.outputs.base_version }}
          name: Release ${{ steps.vars.outputs.release_name }}
          body: |
            📦 릴리스 안내

            메인 프로그램: **yt_downloader.zip**  
            → 실행 파일(ytDownloader.exe), DLL, updater 폴더 포함

            업데이트 도구: **yt_updater.zip**  
            → Updater.exe 및 DLL 포함 (수동 업데이트용)

            ⚠️ 자동 업데이트는 메인 ZIP의 `updater` 폴더를 사용합니다.  
            별도 Updater ZIP은 수동 교체 시에만 사용하세요.
          files: |
            yt_downloader.zip
            yt_updater.zip
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
