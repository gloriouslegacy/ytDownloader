name: Build and Release

on:
  push:
    branches:
      - main      # main 브랜치 push → Pre-release
    tags:
      - "v*"      # 태그 push (예: v1.0.0) → 정식 Release

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write   # 릴리스/태그 작성 권한 필요

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # 📌 최신 릴리스 가져오기
      - name: Get latest release
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            if (releases.length === 0) {
              return "0.1.0";
            } else {
              return releases[0].tag_name.replace(/^v/, ""); // v 제거
            }

      # 📌 버전 계산 (태그 vs main 구분)
      - name: Determine version
        id: vars
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # 태그 push → 정식 Release
            base_version="${GITHUB_REF#refs/tags/v}"
            version="$base_version"
            release_name="$base_version"
          else
            # main push → Pre-release (자동 증가 + 날짜)
            last_commit=$(git log -1 --pretty=%B)
            prev="${{ steps.get_release.outputs.result }}"
            IFS='.' read -r major minor patch <<< "$prev"

            if [[ "$last_commit" == *"BREAKING"* ]]; then
              major=$((major+1)); minor=0; patch=0
            elif [[ "$last_commit" == feat:* ]]; then
              minor=$((minor+1)); patch=0
            else
              patch=$((patch+1))
            fi

            new_version="$major.$minor.$patch"
            date=$(date +%Y%m%d)
            version="$new_version-$date"
            release_name="$version"
            base_version="$new_version"
          fi

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "base_version=$base_version" >> $GITHUB_OUTPUT
          echo "release_name=$release_name" >> $GITHUB_OUTPUT

      # 📌 WPF 앱 빌드
      - name: Build (ytDownloader WPF)
        run: dotnet publish ytDownloader/ytDownloader.csproj -c Release -r win-x64 --self-contained false -o publish/ytDownloader -p:Version=${{ steps.vars.outputs.version }}

      # 📌 Updater 빌드
      - name: Build (Updater)
        run: dotnet publish Updater/Updater.csproj -c Release -r win-x64 --self-contained false -o publish/Updater

      # 📌 릴리스 패키지 준비
      - name: Prepare release package
        shell: bash
        run: |
          mkdir -p dist
          cp -r publish/ytDownloader/* dist/
          cp publish/Updater/Updater.exe dist/
          rm -rf dist/tools || true
          rm -f dist/*.pdb || true
          zip -r yt_downloader_${{ steps.vars.outputs.release_name }}.zip dist/*

      # 📌 GitHub Release 생성
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.vars.outputs.base_version }}
          name: Release ${{ steps.vars.outputs.release_name }}
          files: yt_downloader_${{ steps.vars.outputs.release_name }}.zip
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
